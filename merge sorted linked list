Node* mergeTwoLLs(Node* head1, Node* head2) {
	Node *ft = NULL;
	Node *fh = NULL;

	if (head1->data > head2->data) {
		fh = ft = head2;
		head2 = head2->next;
	}

	else {
		fh = ft = head1;
		head1 = head1->next;
	}

	while (head1 && head2) {
		if (head1->data > head2->data) {
			ft->next = head2;
			ft = ft->next;
			head2 = head2->next;
		}

		//changed else if to else
		// if head1 & head2 is pointing to same numbers i.e. for eg. 20 & 20
		// no condition would be true in earlier case will go in infinite loop
		else {
			ft->next = head1;
			ft = ft->next;
			head1 = head1->next;
		}
	}

	//while loop is necessary as we don't know how many nodes are left in one list
	//it can be 1, it can be 1000
	if (head1) {
		while (head1) {
			ft->next = head1;
			head1 = head1->next;
			ft = ft->next;
		}
	}

	else {
		while (head2) {
			ft->next = head2;
			head2 = head2->next;
			ft = ft->next;
		}
	}
  
  return fh;
}

#include <iostream>
class Node{
public:
    int data;
    Node *next;
    Node(int data){
        this -> data = data;
        this -> next = NULL;
    }
};

using namespace std;
#include "Solution.h"

Node* takeinput() {
    int data;
    cin >> data;
    Node* head = NULL, *tail = NULL;
    while(data != -1){
        Node *newNode = new Node(data);
        if(head == NULL)                  {
            head = newNode;
            tail = newNode;
        }
        else{
            tail -> next = newNode;
            tail = newNode;
        }
        cin >> data;
    }
    return head;
}

void print(Node *head) {
    Node *temp = head;
    while(temp != NULL) {
        cout << temp -> data << " ";
        temp = temp -> next;
    }
    cout<<endl;
}

int main() {
    Node *head1 = takeinput();
    Node *head2 = takeinput();
    Node *head3 = mergeTwoLLs(head1, head2);
    print(head3);
    return 0;
}



